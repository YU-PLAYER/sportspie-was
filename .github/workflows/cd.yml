name: Continuous Deployment

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: false

permissions:
  contents: read

jobs:
  develop-deploy:
    runs-on: ubuntu-22.04
    env:
      IMAGE_TAG: ${{github.sha}}

    steps:
      # 1. Compare branch 코드 내려 받기
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.push.base_ref }}

      # 2. 자바 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. yml 파일 생성
      - name: Set up application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION }}" > ./application.yml
          touch ./application-dev.yml
          echo "${{ secrets.APPLICATION_TEST }}" > ./application-test.yml
          touch ./application-test.yml
          echo "${{ secrets.APPLICATION_DEV }}" > ./application-dev.yml
          touch ./application-prod.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yml
        shell: bash

      # 4. Docker 이미지 build 및 push
      - name: docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          pwd
          ls -al
          docker build -t jinlee1703/sportspie-was:${{env.IMAGE_TAG}} .
          docker push jinlee1703/sportspie-was:${{env.IMAGE_TAG}}

      # AWS SSM을 통한 Run-Command (Docker 이미지 pull 후 docker-compose를 통한 실행)
      - name: deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker system prune -a -f
            docker pull jinlee1703/sportspie-was:${{env.IMAGE_TAG}}
            IMAGE_TAG=${{env.IMAGE_TAG}} docker-compose up
